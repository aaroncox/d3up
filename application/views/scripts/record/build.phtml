<?
	$profile = Epic_Auth::getInstance()->getProfile();
	$this->headTitle($this->record->name); 
	$this->headTitle(ucwords(str_replace("-", " ", $this->record->class))); 
	$this->myBuild = $myBuild = false;
	if($profile && $this->record->_createdBy && $profile->createReference() == $this->record->_createdBy->createReference()) {
		$this->myBuild = $myBuild = true;
	}	
?>
<div id="build">
  <?= $this->render("./record/build/header.phtml") ?>
	<div id="character" class="ui-helper-clearfix" data-class="<?= $this->record->class ?>" <? if($myBuild) { echo "data-owner='true'"; } ?>>
	  <style type="text/css" media="screen">
	   #character {
	     border-top: 1px solid #333;
	   }
	   ul#tabs {
	     float: left;
	     width: 150px;
	     margin: 0;
	     padding: 5px;
	     list-style: none;
	     background: #111;
	     border: 1px solid #333;
	     border-top: 0;
	   }
	   ul#tabs li {
	     margin: 1px;
	   }
	   ul#tabs li.divider {
	     padding: 10px 5px 0;
	     font-weight: bold;
	     text-transform: uppercase;
	   }
	   ul#tabs li:first-child {
	     margin: 1px;
	     padding-top: 0;
	   }
	   div#tabs-render {
	     float: left;
	     width: 494px;
	     border: 0;
	     padding: 0;
	   }
	   div#tabs-render .content-page {
	     border: 0;
	   }
	   div#tabs-render.content-page .form, 
	   div#tabs-render.content-page .page {
	     padding: 2px;
       margin: 10px 5px;
	   }
	   div#tabs-render.content-page .form {
  	   padding: 20px 50px;	     
	   } 
	   div#tabs-render > div {
	   }
	   div#tabs-render > div > h5 {
        margin: 0;
        font-size: 1em;
        line-height: 1.4em;
        font-weight: bold;
        border-right: 0;
        padding: 5px 10px;
        text-transform: uppercase;
        color: #B18135;
        background: rgb(17,17,17); /* Old browsers */
        background: -moz-linear-gradient(top, rgba(17,17,17,1) 0%, rgba(34,34,34,1) 100%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(17,17,17,1)), color-stop(100%,rgba(34,34,34,1))); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top, rgba(17,17,17,1) 0%,rgba(34,34,34,1) 100%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top, rgba(17,17,17,1) 0%,rgba(34,34,34,1) 100%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top, rgba(17,17,17,1) 0%,rgba(34,34,34,1) 100%); /* IE10+ */
        background: linear-gradient(to bottom, rgba(17,17,17,1) 0%,rgba(34,34,34,1) 100%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#111111', endColorstr='#222222',GradientType=0 ); /* IE6-9 */
	   }
	   div#tabs-render > div > a.button {
       margin: 10px;
	   }
	   div#tabs-render > div:first-child {
	     display: block;
	   }
	   div#statistics {
	     float: right;
	     width: 310px;
	     background: #111;
	     border: 1px solid #333;	 
	     border-top: 0;
	     padding-bottom: 2px;    
	     margin: 0 2px 0 0;
	   }
	  </style>
	  <? if($this->resync): ?>
	  <div class="notifications">
      <strong>Notice</strong>: Your character has been synchronized with the Battle.net Profile specified.
	  </div>
	  <? endif ?>
    <ul id="tabs">
      <li class='divider'>Character</li>
      <li><a data-tab="#gear" class="button current">Gear</a></a></li>
      <li><a data-tab="#skills" class="button">Skills</a></li>
      <li><a data-tab="#passives" class="button">Passives</a></li>
      <li><a data-tab="#buffs" class="button">Buffs</a></li>
      <? if($this->myBuild): ?>
      <li><a data-tab="#edit" class="button">Edit</a></li>
      <? endif ?>
      <li class='divider'>Tools</li>
      <li><a data-tab="#sync" class="button">Battle.net Sync</a></li>
      <li><a data-tab="#simulate" class="button">Simulate</a></li>
      <li><a data-tab="#compare" class="button">Compare</a></li>
      <li><a data-tab="#suggestions" class="button">Suggestions</a></li>
      <li><a data-tab="#share" class="button">Share</a></li>
    </ul>
    <div id="tabs-render" class="content-page">
      <div id="gear"><?= $this->render("./record/build/gear.phtml") ?></div>
      <div id="skills"><?= $this->render("./record/build/skills.phtml") ?></div>
      <div id="passives"><?= $this->render("./record/build/passives.phtml") ?></div>
      <div id="buffs"><?= $this->render("./record/build/buffs.phtml") ?></div>
      <? if($this->myBuild): ?>
      <div id="edit"><?= $this->render("./record/build/edit.phtml") ?></div>
      <? endif ?>
      <div id="sync"><?= $this->render("./record/build/sync.phtml") ?></div>
      <div id="simulate"><?= $this->render("./record/build/simulate.phtml") ?></div>
      <div id="compare"><?= $this->render("./record/build/compare.phtml") ?></div>
      <div id="suggestions"><?= $this->render("./record/build/suggestions.phtml") ?></div>
      <div id="share"><?= $this->render("./record/build/share.phtml") ?></div>
    </div>
    <div id="statistics" class="inline-flow">
      <?= $this->render("record/build/statistics.phtml") ?>
    </div>
  </div>
  <div id="gear-change" title="Select an Item">
		<p>Listed below are all of the items you've created that would fit into this equipment slot.</p>
		<p>Please choose which item you'd like to equip.</p>
		<fieldset>
			<select name="available" id="available-gear" class="ui-widget-content ui-corner-all">
			</select>
		</fieldset>
		</form>
	</div>
	<script type="text/javascript">
		var bonusCounter = {};
		$(".equipped a").each(function() {
			var json = $(this).data("json");
			if(json.set) {
				if(!bonusCounter[json.set]) {
					bonusCounter[json.set] = 0;
				}
				bonusCounter[json.set]++;
			}
		});
		$(".equipped a").each(function() {
			var json = $(this).data("json");
			if(json.set) {
				$(this).attr("data-set-count", bonusCounter[json.set]);
			}
		});
		<? if($this->alreadyVoted): ?>
		var voted = '<?= $this->alreadyVoted ?>';
		<? else: ?>
		var voted = false;
		<? endif ?>
		<? if($profile): ?>
		var isLoggedIn = true;
		<? else: ?>
		var isLoggedIn = false;
		<? endif ?>

		// Sticky Statistics on the page
		// var $window = $(window),
		// 		$stickyEl = $('.sidebar');
		// 
		// var elTop = $stickyEl.offset().top;
		// $window.scroll(function() {
		// 	var windowTop = $window.scrollTop();
		// 	$stickyEl.toggleClass('sticky', windowTop > elTop);
		// });
	</script>
	<script type="text/javascript" src="/js/unmin/compare.js"></script>	
	<script type="text/javascript" src="/js/unmin/buildv2.js"></script>	
	<script type="text/javascript" charset="utf-8">
	  $(function() {
      var skills = {
            actives: <?= json_encode($this->record->actives->export()); ?>,
            passives: <?= json_encode($this->record->passives->export()); ?>
          },
          gearSlots = $("#build-gear .equipped"),
          gear = gearSlots.find("a[data-json]"),
          meta = {
            level: '<?= $this->record->level ?>',
            paragon: '<?= $this->record->paragon ?>',
            heroClass: '<?= $this->record->class ?>'
          },
          build = new d3up.Build({
            gear: gear, 
            skills: skills,
            meta: meta
          }),
          buildEmpty = new d3up.Build, 
          compare = new d3up.Compare;
      console.log(compare);
      build.renderTo($("#statistics"));
      // console.log(build.getGear(), buildEmpty.getGear());
      // console.log(build.getSkills(), buildEmpty.getSkills());
	  });
	
	
	
	
    $(function() {
      var controls = $('#tabs li a'),
          tabs = $("#tabs-render"),
          atabs = $("#tabs-render > div");
      atabs.hide();
      tabs.children("#gear").show();
      controls.bind('click',function(){
        atabs.hide();
        controls.removeClass('current');
        tabs.find($(this).attr("data-tab")).show(); //show tab content that matches tab title index
        $(this).addClass('current'); //add current class on clicked tab title
      });
    });
    $(function() {
      var selector = $("#gear-stats"),
          table = $(".equipment-table"),
          cellHeader = $(".cell-header"),
          cellData = $(".cell-data"),
          gearChange = $(".show-gear-change"),
          gearFilter = $("#gear-filters"),
          gearFilters = $(".equipment-table .filters"),
          itemRatings = $("tr.item-rating");
      gearFilter.chosen();
      gearFilters.hide();
      gearChange.click(function() {
        selector.find("option").removeAttr("selected");
        selector.find("option[value=gear-controls]").attr("selected", "selected");
        selector.trigger("change");
      });
      cellData.hide();
      cellHeader.hide();
      table.find(".stats").show();
      selector.bind('change', function() {
        cellData.hide();
        cellHeader.hide();
        table.find("." + $(this).val()).show();
      });
      $(".item-rating-filter").bind('click', function() {
        var attr = $(this).data("attr");
        gearFilter.find("option[value=" + attr + "]").attr("selected", "selected");
        gearFilter.trigger("liszt:updated");
        gearFilter.trigger("change");
        gearFilters.show();
      }).css({cursor: 'pointer'});
      var button = $("<a class='button'>").bind('click', function() {
        $(".perfection-table").find(".no-match-placeholder").remove();
        $("tr.item-rating").show().removeClass("no-match");
        toggle = false;            
        $(".equipment-table > tbody").find(".remove-filter").remove();
        gearFilter.find("option").attr("selected", null);
        gearFilters.hide();
      }).html("Remove Filter");
      gearFilters.find("th").append(button); 
      gearFilter.bind('change', function() {
        var attrs = $(this).val(),
            attr = "";
        if(attrs && attrs.length > 0) {
          $.each(attrs, function(k, a) {
            if(attr == "") {
              attr += ".item-rating-" + a;
            } else {
              attr += ", .item-rating-" + a;            
            }
          });
          itemRatings.not(attr).hide().addClass("no-match");
          $.each(attrs, function(k,v) {
            $(".item-rating-" + v).show().removeClass("no-match");
          });
        } else {
          gearFilter.find("option").attr("selected", null);
          gearFilter.trigger("liszt:updated");
          $(".perfection-table").find(".no-match-placeholder").remove();
          $(".equipment-table > tbody").find(".remove-filter").remove();
          $("tr.item-rating").show().removeClass("no-match");
          gearFilters.hide();
        }
        $(".perfection-table").each(function() {
          if($(this).find(".item-rating.no-match").length == $(this).find(".item-rating").length) {
            if($(this).find(".no-match-placeholder").length < 1) {
              $(this).append("<tr class='no-match-placeholder'><td colspan='3' style='color: #F50'>None</td></tr>");              
            }
          } else {
            $(this).find(".no-match-placeholder").remove();
          }
        });
      })
      // Calculate Armor Percentages
      var tArmor = $("tr.stat-armor td.data").text().replace(",","");
      $(".item-rating-armor .rating-bar").each(function() {
        // console.log(tArmor);
        $(this).attr("data-percent", $(this).data("value") / 1000 * 100);
        $(this).css("width", Math.round(($(this).data("value") / 1000) * 100) + "%");
      });
      // Apply Colors to Ratings Bars
      $(".rating-bar").each(function() { 
        var elem = $(this), 
            attr = $(this).closest("tr.item-rating").data("attr"),
            percent = elem.attr("data-percent") / 100,
            elem2 = $(this).closest(".perfection-table").find(".item-rating-" + attr + " .bounds .percent");
        if (percent > 1) { 
          elem.css("background-color", "white"); 
          elem2.css("color", "white"); 
        } else if(percent == 0) {
          elem.css("background-color", "#555"); 
          elem2.css("color", "#555"); 
        } else { 
          elem.css("background-color", $.Color( "red" ).lightness(0.5).transition($.Color( "green" ).lightness(0.5), percent)); 
          elem2.css("color", $.Color( "red" ).lightness(0.5).transition($.Color( "green" ).lightness(0.5), percent));
        } 
      });    
    });
  </script>
</div>