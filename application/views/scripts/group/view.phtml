<?
	$this->headTitle($this->group->name . " (Group)"); 
	$this->hasBuilds = false;
	$this->myGroup = false;
	$this->profile = D3Up_Auth::getInstance()->getProfile();
	if($this->builds) {
		$this->hasBuilds = true;
	}
	if($profile = D3Up_Auth::getInstance()->getProfile()) { 
		// var_dump($this->group->owner, $profile->createReference()); exit;
		if($this->group->owner->createReference() == $profile->createReference()) {
			$this->myGroup = true;
		}
	}
?>
<div class="group-builds content-page">				
	<div class='featured title-block ui-helper-clearfix' data-class="all">
		<div class="controls ui-helper-clearfix" style="padding: 5px">
			<? if($this->myGroup): ?>
				<a href="#" class="button addGroupMember">Add Build</a>
				<a href="#" class="button joinGroup">Add My Build</a>
				<a href="/group/<?= $this->group->id ?>/edit" class="button">Edit Group</a>
			<? elseif($this->group->mode): ?>
				<a href="#" class="button joinGroup">Join Group</a>
			<? endif ?>
		</div>
		<h5 style='color: #B18135'>Group (<?= ($this->group->mode) ? "Open" : "Closed" ?>)</h5>
		<h2 class="ui-table-header"><?= $this->group->name ?></h2>
		<div class='section-preview'>		
			<?= $this->group->description ?>&nbsp;
		</div>
	</div>
	<? if($this->myGroup): ?>
	<div class="form member-form" style="display: none">
		<form method="post" class="form" action="/group/<?= $this->group->id ?>/add">
			<h2>Add a Build to this Group</h2>
			<p>Character ID #</p>
			<p><input type="text" name="build-id"/></p>
			<p>The ID is the number you see in the URL. http://d3up.com/b/1 is <strong>1</strong></p>
			<input type="submit" name="Add"/>
			</dl>
		</form>
	</div>
	<? endif ?>
	<? if($this->hasBuilds): ?>
	<div class="form join-form" style="display: none">
		<form method="post" class="form" action="/group/<?= $this->group->id ?>/join">
			<h2>Add your Build to this Group</h2>
			<p>My Builds</p>
			<select name="build-id">
				<? foreach($this->builds as $build): ?>
					<option value="<?= $build->id ?>">[L<?= $build->level ?>/P<?= $build->paragon?>/<?= ($this->hardcore) ? "HC" : "SC" ?>] <?= $build->name ?> (<?= $build->class ?>)</option>
				<? endforeach ?>
			</select>
			<input type="submit" name="Join"/>
			</dl>
		</form>
	</div>
	<? endif ?>
	<table id="all-builds" class="d3up-table">
		<?= $this->render("./group/_build-table.phtml")?>
	</table>
</div>
<script type="text/javascript" charset="utf-8">
	$(function() {
		var add = $(".addGroupMember");
		add.click(function() {
			$(".member-form").show();
		});
		var join = $(".joinGroup");
		join.click(function() {
			$(".join-form").show();
		});
	})
</script>
<? if(!$this->noScript): ?>
<script type="text/javascript">
	$(function() {
		var advSearch = $("#advSearch"),
				advSearchPanel = $("#advSearchPanel"),
				advSkillSearch = $("#advSkillSearch"),
				advPassiveSearch = $("#advPassiveSearch"),
				isHardcoreCheckbox = $("#isHardcore"),
				classSelect = $("#classSelect");
		advSearch.click(function() {
			if(advSearchPanel.is(":visible")) {
				advSearchPanel.hide();
			} else {
				advSearchPanel.show();
			}
		});
		$.each(d3up.gameData.actives, function(heroClass, data) {
			$.each(data, function(k,v) {
				var option = $("<option>");
				option.html(v.name);
				option.attr("value", k);
				advSkillSearch.append(option);
			});
		});
		$.each(d3up.gameData.passives, function(heroClass, data) {
			$.each(data, function(k,v) {
				var option = $("<option>");
				option.html(k.replace(/-/g, " ").capitalize());
				option.attr("value", k);
				advPassiveSearch.append(option);
			});
		});
		<? foreach(explode("|", $this->selectedActives) as $active): ?>
			advSkillSearch.find("option[value='<?= $active ?>']").attr("selected", "selected");
		<? endforeach ?>
		<? foreach(explode("|", $this->selectedPassives) as $passive): ?>
			advPassiveSearch.find("option[value=<?= $passive ?>]").attr("selected", "selected");
		<? endforeach ?>
		advSkillSearch.chosen();
		advPassiveSearch.chosen();
		<? if(empty($this->selectedPassives) && empty($this->selectedActives)): ?>
		advSearchPanel.hide();
		<? endif ?>
		$(".build-paginator a").bind('click', setupPaginator);
		advSkillSearch.bind('change', searchBuilds);
		advPassiveSearch.bind('change', searchBuilds);
		classSelect.bind('change', searchBuilds);
		isHardcoreCheckbox.bind('change', searchBuilds);
		function searchBuilds() {
			var skills = advSkillSearch.val(),
					passives = advPassiveSearch.val(), 
					heroClass = classSelect.val(),
					isHardcore = isHardcoreCheckbox.is(":checked");
			if(skills && skills.length) {
				skills = skills.join("|");
			}
			if(passives && passives.length) {
				passives = passives.join("|");
			}
			$.ajax({
				data: {
					skills: skills,
					passives: passives,
					class: heroClass,
					isHardcore: isHardcore,
				},
				success: function(data) {
					var content = $(data);
					$("#all-builds").replaceWith(content.find("#all-builds"));
					$(".build-paginator a").bind('click', setupPaginator);
					$("td.skills img").each(bindAllSkilltips);
				}
			});
		}
		$("td.skills img").each(function() {
			if($(this).data("id") && $(this).data("id") != "undefined") {
				var skill = d3up.gameData.actives[$(this).attr("data-class")][$(this).attr("data-id")];
				if(!skill) {
					skill = d3up.gameData.passives[$(this).attr("data-class")][$(this).attr("data-id")];
					if(skill) {
  					skill.name = $(this).attr("data-id").replace(/\-/g," ").capitalize();					  
					}
				}
				if(skill) {
  				var tooltip = skill.desc;
					if(skill.rune) {
						tooltip = tooltip + "<br/><br/>" + skill.rune;
					}
					$(this).attr("data-name", skill.name);
					$(this).attr("data-tooltip", tooltip);
					$(this).bindSkilltip();				
				}				
			}
		});
		function setupPaginator() {
			var resultsTable = $(".recent-builds table#all-builds tbody"),
					link = $(this).prop("href");
			resultsTable.addClass("ui-state-disabled");
			$.ajax({
				url: link,
				type: 'html',
				success: function(data) {
					var results = $("<div/>").append(data);
					resultsTable.replaceWith(results.find(".recent-builds table#all-builds tbody"));
					$(".build-paginator a").bind('click', setupPaginator);
					$("td.skills img").each(bindAllSkilltips);
				}
			});
			return false;
		};
		function bindAllSkilltips() {
			var skill = d3up.gameData.actives[$(this).attr("data-class")][$(this).attr("data-id")];
			if(!skill) {
				skill = d3up.gameData.passives[$(this).attr("data-class")][$(this).attr("data-id")];
				if(skill != "undefined" && $(this).attr("data-id").length) {
					skill.name = $(this).attr("data-id").replace(/\-/g," ").capitalize();				
				}
			}
			if(skill) {
				var tooltip = skill.desc;
				if(skill.rune) {
					tooltip = tooltip + "<br/><br/>" + skill.rune;
				}
				$(this).attr("data-name", skill.name);
				$(this).attr("data-tooltip", tooltip);
				$(this).bindSkilltip();				
			}
		}
	});
</script>
<? endif ?>